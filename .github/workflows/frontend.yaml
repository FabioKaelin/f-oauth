name: Frontend


on:
  # schedule:
    # - cron: '25 19 * * *'
  push:
    branches:
    - "main"
    paths:
    - "frontend/**"
    - ".github/workflows/frontend.yaml"
    # Publish semver tags as releases.
    # tags: [ 'v*.*.*' ]
  # pull_request:
  #   branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "oauth-frontend"


jobs:
  build:
    #runs-on: self-hosted
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: login ghcr.io
        run: |
          echo $CR_PAT | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        env:
          CR_PAT: ${{ secrets.CR_PAT }}

      - name: install tools
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: build and push
        run: |
          export version=$(cat project-meta.jsonc | jq -r ."frontend_version")
          cd frontend
          echo ${{ env.REGISTRY }}
          echo ${{ env.IMAGE_NAME }}
          echo ${{ github.actor }}
          echo ${version}


          echo "VITE_F_VERSION=${version}" > .env

          docker buildx ls
          docker buildx rm fdeployer || true
          docker buildx create --name fdeployer
          docker buildx use fdeployer
          docker buildx inspect --bootstrap
          export username=$(echo ${{ github.actor }} | tr '[:upper:]' '[:lower:]')
          docker buildx build --platform linux/arm64,linux/amd64 -t ${{ env.REGISTRY }}/${username}/${{ env.IMAGE_NAME }}:${version} --push .
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3

      - name: install tools
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - uses: azure/setup-kubectl@v3
      # with:
          # version: '<version>' # default is latest stable
        id: install

      - name: set kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "apiVersion: v1" > ~/.kube/config
          echo "clusters:" >> ~/.kube/config
          echo "- cluster:" >> ~/.kube/config
          echo "    extensions:" >> ~/.kube/config
          echo "    - extension:" >> ~/.kube/config
          echo "        last-update: Thu, 22 Jun 2023 19:21:36 CEST" >> ~/.kube/config
          echo "        provider: minikube.sigs.k8s.io" >> ~/.kube/config
          echo "        version: v1.30.1" >> ~/.kube/config
          echo "      name: cluster_info" >> ~/.kube/config
          echo "    server: https://k8s.fabkli.ch" >> ~/.kube/config
          echo "  name: minikube" >> ~/.kube/config
          echo "contexts:" >> ~/.kube/config
          echo "- context:" >> ~/.kube/config
          echo "    cluster: minikube" >> ~/.kube/config
          echo "    extensions:" >> ~/.kube/config
          echo "    - extension:" >> ~/.kube/config
          echo "        last-update: Thu, 22 Jun 2023 19:21:36 CEST" >> ~/.kube/config
          echo "        provider: minikube.sigs.k8s.io" >> ~/.kube/config
          echo "        version: v1.30.1" >> ~/.kube/config
          echo "      name: context_info" >> ~/.kube/config
          echo "    namespace: test" >> ~/.kube/config
          echo "    user: minikube" >> ~/.kube/config
          echo "  name: minikube" >> ~/.kube/config
          echo "current-context: minikube" >> ~/.kube/config
          echo "kind: Config" >> ~/.kube/config
          echo "preferences: {}" >> ~/.kube/config
          echo "users:" >> ~/.kube/config
          echo "- name: minikube" >> ~/.kube/config
          echo "  user:" >> ~/.kube/config
          echo "    password: ${KUBE_PWD}" >> ~/.kube/config
          echo "    username: minikube" >> ~/.kube/config
        env:
          KUBE_PWD: ${{ secrets.KUBE_PWD }}

      - name: deploy
        run: |
          export version=$(cat project-meta.jsonc | jq -r ."frontend_version")

          cd frontend
          kubectl create ns oauth || true
          kubectl config set-context --current --namespace oauth
          sed -i "s/latest/${version}/g" resources/deployment.yaml
          kubectl apply -f resources/deployment.yaml
          kubectl rollout restart deployment oauth-frontend
          kubectl get pods

